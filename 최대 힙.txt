#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#define MAX_ELEMENT 100001

typedef struct {
	int key;
} element;

typedef struct {
	int heap[MAX_ELEMENT];   //값을 저장할 배열 heap을 만들고 heap의 크기를 결정하는 heap_size를 포함하는 구조체 
	int heap_size;
} HeapType;

HeapType* create() {   //heap을 생성하는 함수
	return (HeapType*)malloc(sizeof(HeapType));
}

void init(HeapType* h) {   //heap을 초기화 시키는 함수
	h->heap_size = 0;
}

int is_empty(HeapType* h) {   //heap이 0인 경우에 0을 리턴하는 함수
	if (h->heap_size == 0)
		return 0;
	return 1;
}

void insert_max_heap(HeapType* h, int item) {       //값을 삽입하는 함수
	int i;
	i = ++(h->heap_size);                           //값을 삽입하므로 heap_size의 갑을 증가시킨다
	while ((i != 1) && (item > h->heap[i / 2])) {   //i가 1이 아니고 부모 노드보다 크면 부모 노드의 값을 자식노드의 위치에 저장한 후 i를 2로 나눠 반복한다.
		h->heap[i] = h->heap[i / 2];
		i /= 2;
	}
	h->heap[i] = item;   //주어진 값을 알맞은 위치에 저장
}

int delete_max_heap(HeapType* h) {   //값을 삭제하는 함수
	if (is_empty(h) == 0) {   //heap이 비어있으면 0 출력
		return 0;
	}
	int parent, child;
	int item, temp;
	item = h->heap[1];
	temp = h->heap[(h->heap_size)--];   //tmep에 배열의 맨 마지막 값을 저장한 후에 heap_size를 1 감소시킨다.
	parent = 1;
	child = 2;
	while (child <= h->heap_size) {     //child가 heap_size보다 커질때까지 반복
		if ((child < h->heap_size) &&   //child가 heap_size보다 작고 child노드의 값이 child+1노드의 값보다 작다면 child 값을 증가시킨다.
			(h->heap[child]) < h->heap[child + 1])
			child++;
		if (temp >= h->heap[child]) break;   //temp의 값이 child의 값보다 크다면 즉, 맨처음 child의 값이 2였으므로 노드 2,3보다 크다면 break한다.
		h->heap[parent] = h->heap[child];    //1번 노드에 증가시킨 child노드 값을 저장하고 parent를 child로 바꾼뒤 child를 2배 해서 반복한다.
		parent = child;
		child *= 2;
	}
	h->heap[parent] = temp;   //빈공간 parent에 temp의 값을 저장한다.
	return item;
}

int main(void) {
	HeapType* h = create();   //heap 생성
	init(h);   //heap 초기화
	int N, x;
	scanf("%d", &N);   //연산의 개수 입력

	for (int i = 0; i < N; i++) {   //N번 반복
		scanf("%d", &x);   //x의 값 입력
		if (x == 0) {      //x가 0일 때
			printf("%d\n", delete_max_heap(h));   //아니면 heap에서 가장 큰 값 삭제
		}
		else {
			insert_max_heap(h, x);   //x가 자연수 이면 heap에 x 삽입
		}
	}
	return 0;
}