#define _CRT_SECURE_NO_WARNINGS  //scanf 반환값 무시
#include <stdio.h>
#include <stdlib.h>

typedef struct _queue {   
    int front;
    int rear;
    int capacity;
    int* array;
    int* array_1;  
} queue;

queue* CreateCQueue() {                  //큐 생성
    queue* q = malloc(sizeof(queue));
    if (!q)
        return NULL;
    q->capacity = 1000;
    q->front = q->rear = -1;
    q->array = malloc(q->capacity * sizeof(int));
    if (!q->array)
        return NULL;
    return q;
}

int IsEmptyCQ(queue* q)                 //큐 공백상태
{
    return (q->front == -1);
}

int IsFullCQ(queue* q)                  //큐 포화상태
{
    return ((q->rear + 1) % q->capacity == q->front);
}

int CQsize(queue* q)
{
    return (q->capacity - q->front + q->rear + 1) % q->capacity;
}

void ResizeCQ(queue* q)                 //큐 크기조정
{
    int size = q->capacity;
    q->capacity = q->capacity * 2;
    q->array_1 = realloc(q->array, q->capacity);   
    if (q->array_1 != NULL) {
        q->array = q->array_1;
    }

    if (!q->array)
    {
        printf("failed to resize\n");
        return;
    }
    if (q->front > q->rear)
    {
        for (int i = 0; i < q->front; i++)
        {
            q->array[i + size] = q->array[i];
        }
        q->rear = q->rear + size;
    }
    printf("Size of Q doubled\n");
}

void EnCQ(queue* q, int data)         // 큐 데이터 삽입
{
    if (IsFullCQ(q))
        ResizeCQ(q);
    q->rear = (q->rear + 1) % q->capacity;
    q->array[q->rear] = data;
    if (q->front == -1)
        q->front = q->rear;

}

int DeCQ(queue* q)                    //큐 데이터 삭제
{
    int data = 0;
    if (IsEmptyCQ(q))
    {
        printf("CQueue is Empty\n");
        return 0;
    }
    else
    {
        data = q->array[q->front];
        if (q->front == q->rear)
            q->front = q->rear = -1;
        else
            q->front = (q->front + 1) % q->capacity;
    }
    return data;
}

void DelCQ(queue* q)                 //메모리 반환
{
    if (q)
    {
        if (q->array)
            free(q->array);
        free(q);
    }
    printf("Queue Deleted\n");
}

int main(void)
{
    int N, k, temp;
    scanf("%d %d", &N, &k);         //사람 수N과 k값 입력 
    queue* Q = CreateCQueue();
    for (int i = 0; i < N; i++) {   //큐에 1번부터 N번까지의 사람 입력
        EnCQ(Q, i+1);
    }

    printf("<");
    while (Q->front != Q->rear) {   //큐에 데이터가 하나 남을때까지 반복
        for (int i = 0; i < k - 1; i++) {   //k번째 사람을 제거하는 것이고 원을 이루고 있으므로 k-1번째 사람을 제거후 다시 삽입해준다.
            temp = DeCQ(Q);  
            EnCQ(Q, temp);
        }
        printf("%d,", DeCQ(Q));             //k번째 사람 제거
    }
    printf("%d", DeCQ(Q));                  //마지막 사람 제거
    printf(">");
    DelCQ(Q);
    return 0;
}